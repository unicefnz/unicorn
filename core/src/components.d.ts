/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariant } from "./components/uni-button/uni-button";
import { OverlayEventDetail } from "./lib/OverlayInterface";
export namespace Components {
    interface UniBackdrop {
        /**
          * If `true`, the backdrop will can be clicked and will emit the `uniBackdropTap` event.
         */
        "tappable": boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible": boolean;
    }
    interface UniBarText {
    }
    interface UniButton {
        /**
          * Defines the main color of the button Eg. accent, primary
         */
        "color": string | null;
        /**
          * Disables the button, preventing input
         */
        "disabled": boolean;
        /**
          * Make this button a link to `href` instead
         */
        "href"?: string;
        /**
          * Display as an icon button
         */
        "icon"?: boolean;
        /**
          * Changes the button into a loading state
         */
        "loading": boolean;
        /**
          * Type of the underlying button See https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/button-has-type.md One of 'button', 'submit', or 'reset'
         */
        "type": string;
        /**
          * Sets the variant of the button One of 'solid' or 'border'
         */
        "variant": ButtonVariant;
    }
    interface UniCheckbox {
        /**
          * The checked state of the checkbox
         */
        "checked": boolean;
        /**
          * When true, the checkbox is marked as disabled and state cannot be modified
         */
        "disabled": boolean;
        /**
          * Puts the checkbox in an indeterminate state ( [-] )
         */
        "indeterminate": boolean;
        /**
          * Prevents the state from being modified
         */
        "readonly": boolean;
        /**
          * HTML Form value. This is not the checked state, use checked instead
         */
        "value"?: string;
    }
    interface UniComboGroup {
        /**
          * Value of the selected option
         */
        "value": string | number;
        /**
          * Display a different style radio group, either a "combo" row or "button" group
         */
        "variant": 'combo' | 'button';
    }
    interface UniComboItem {
        /**
          * Marks this option as disabled
         */
        "disabled": boolean;
        "selected": boolean;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * Machine value for the option
         */
        "value": string;
    }
    interface UniComboText {
        /**
          * Marks this option as disabled
         */
        "disabled": boolean;
        /**
          * Event to fire the select event on - focus: when the input is focused - uniInput: when the input's value is changed
         */
        "selectOn": string;
        "selected": boolean;
        "setFocus": (ev: any) => Promise<void>;
        /**
          * Machine value for the option
         */
        "value": string;
    }
    interface UniDialog {
        /**
          * Controls whether clicking on the backdrop will dismiss the dialog
         */
        "backdropDismiss": boolean;
        /**
          * Dismiss the alert overlay after it has been presented.
          * @param data Any data to emit in the dismiss events.
          * @param role The role of the element that is dismissing the alert. This can be useful in a button handler for determining which button was clicked to dismiss the alert. Some examples include: ``"cancel"`, `"destructive"`, "selected"`, and `"backdrop"`.
         */
        "dismiss": (data?: any, role?: string) => Promise<boolean>;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose": boolean;
        "overlayIndex": number;
        /**
          * Present the alert overlay after it has been created.
         */
        "present": () => Promise<void>;
        "presented": boolean;
    }
    interface UniDialogActions {
    }
    interface UniDialogContent {
        /**
          * Whether to play the shaking animation
         */
        "shaking": boolean;
    }
    interface UniDialogTitle {
    }
    interface UniErrors {
        /**
          * Display one or more errors
         */
        "error"?: string | string[];
    }
    interface UniExpandableField {
        /**
          * Makes the field disabled and unselectable
         */
        "disabled": boolean;
        /**
          * Display text inside the trigger
         */
        "displayText": string;
        /**
          * Displays error(s) below the input
         */
        "error": string | string[];
        /**
          * Label text above the field
         */
        "label": string;
        /**
          * Displays a visual (optional) marker
         */
        "optional": boolean;
    }
    interface UniOutsideClick {
        /**
          * Specify a root to listen on, anything "outside" this will trigger. Useful for escaping shadowDOM
         */
        "root"?: HTMLElement;
    }
    interface UniProgressLinear {
        /**
          * Set the bar's color
         */
        "color"?: string;
        /**
          * Controls if the loading bar is visible *
         */
        "value": boolean;
    }
    interface UniRadioController {
        /**
          * Value of the selected option
         */
        "value": string;
    }
    interface UniSelect {
        /**
          * Displays error(s) below the input
         */
        "error": string | string[];
        /**
          * Label to display above the select box
         */
        "label": string;
    }
    interface UniTagChip {
        /**
          * Override the default color
         */
        "color": string;
    }
    interface UniTextField {
        /**
          * Hint to the user agent how this field should be autocompleted
         */
        "autocomplete": string;
        /**
          * Makes the field disabled and unselectable
         */
        "disabled": boolean;
        /**
          * Displays errors below the input, or puts field into error state
         */
        "error": string | string[] | boolean;
        /**
          * Get the underlying <input> DOM node
         */
        "getInputElement": () => Promise<HTMLInputElement | HTMLTextAreaElement>;
        /**
          * Label text above the field
         */
        "label": string;
        /**
          * Alternatively, use a <slot> inside the label to render custom contents.
         */
        "labelSlot": boolean;
        /**
          * Maximum value when the input is in number mode
         */
        "max": number;
        /**
          * Maximum string length
         */
        "maxlength": number;
        /**
          * Minimum value when the input is in number mode
         */
        "min": number;
        /**
          * Minimum string length
         */
        "minlength": number;
        /**
          * Name of the native input element
         */
        "name": string;
        /**
          * Displays a visual (optional) marker
         */
        "optional": boolean;
        /**
          * Placeholder displayed inside the field
         */
        "placeholder": string;
        /**
          * Prevents editing the field, but allows selecting text
         */
        "readonly": boolean;
        /**
          * Marks the input as required
         */
        "required": boolean;
        /**
          * Type for the underlying <input> or "textarea" to switch out the element
         */
        "type": string;
        /**
          * Set the value of the field
         */
        "value": string;
    }
    interface UniTooltip {
        /**
          * Whether to display an arrow pointing from the tooltip bubble
         */
        "arrow": boolean;
        /**
          * Delay before hiding the tooltip after mouseleave/blur
         */
        "hideDelay": number;
        /**
          * Which side to position the tooltip on
         */
        "position"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Text content to display inside the tooltip. Overrides the `content` slot
         */
        "text"?: string;
        /**
          * Control whether the tooltip shows on focus
         */
        "useFocus": boolean;
        /**
          * Control whether the tooltip shows on hover
         */
        "useHover": boolean;
        /**
          * Programmatically show the tooltip
         */
        "value"?: boolean;
    }
    interface UniUnderline {
    }
}
declare global {
    interface HTMLUniBackdropElement extends Components.UniBackdrop, HTMLStencilElement {
    }
    var HTMLUniBackdropElement: {
        prototype: HTMLUniBackdropElement;
        new (): HTMLUniBackdropElement;
    };
    interface HTMLUniBarTextElement extends Components.UniBarText, HTMLStencilElement {
    }
    var HTMLUniBarTextElement: {
        prototype: HTMLUniBarTextElement;
        new (): HTMLUniBarTextElement;
    };
    interface HTMLUniButtonElement extends Components.UniButton, HTMLStencilElement {
    }
    var HTMLUniButtonElement: {
        prototype: HTMLUniButtonElement;
        new (): HTMLUniButtonElement;
    };
    interface HTMLUniCheckboxElement extends Components.UniCheckbox, HTMLStencilElement {
    }
    var HTMLUniCheckboxElement: {
        prototype: HTMLUniCheckboxElement;
        new (): HTMLUniCheckboxElement;
    };
    interface HTMLUniComboGroupElement extends Components.UniComboGroup, HTMLStencilElement {
    }
    var HTMLUniComboGroupElement: {
        prototype: HTMLUniComboGroupElement;
        new (): HTMLUniComboGroupElement;
    };
    interface HTMLUniComboItemElement extends Components.UniComboItem, HTMLStencilElement {
    }
    var HTMLUniComboItemElement: {
        prototype: HTMLUniComboItemElement;
        new (): HTMLUniComboItemElement;
    };
    interface HTMLUniComboTextElement extends Components.UniComboText, HTMLStencilElement {
    }
    var HTMLUniComboTextElement: {
        prototype: HTMLUniComboTextElement;
        new (): HTMLUniComboTextElement;
    };
    interface HTMLUniDialogElement extends Components.UniDialog, HTMLStencilElement {
    }
    var HTMLUniDialogElement: {
        prototype: HTMLUniDialogElement;
        new (): HTMLUniDialogElement;
    };
    interface HTMLUniDialogActionsElement extends Components.UniDialogActions, HTMLStencilElement {
    }
    var HTMLUniDialogActionsElement: {
        prototype: HTMLUniDialogActionsElement;
        new (): HTMLUniDialogActionsElement;
    };
    interface HTMLUniDialogContentElement extends Components.UniDialogContent, HTMLStencilElement {
    }
    var HTMLUniDialogContentElement: {
        prototype: HTMLUniDialogContentElement;
        new (): HTMLUniDialogContentElement;
    };
    interface HTMLUniDialogTitleElement extends Components.UniDialogTitle, HTMLStencilElement {
    }
    var HTMLUniDialogTitleElement: {
        prototype: HTMLUniDialogTitleElement;
        new (): HTMLUniDialogTitleElement;
    };
    interface HTMLUniErrorsElement extends Components.UniErrors, HTMLStencilElement {
    }
    var HTMLUniErrorsElement: {
        prototype: HTMLUniErrorsElement;
        new (): HTMLUniErrorsElement;
    };
    interface HTMLUniExpandableFieldElement extends Components.UniExpandableField, HTMLStencilElement {
    }
    var HTMLUniExpandableFieldElement: {
        prototype: HTMLUniExpandableFieldElement;
        new (): HTMLUniExpandableFieldElement;
    };
    interface HTMLUniOutsideClickElement extends Components.UniOutsideClick, HTMLStencilElement {
    }
    var HTMLUniOutsideClickElement: {
        prototype: HTMLUniOutsideClickElement;
        new (): HTMLUniOutsideClickElement;
    };
    interface HTMLUniProgressLinearElement extends Components.UniProgressLinear, HTMLStencilElement {
    }
    var HTMLUniProgressLinearElement: {
        prototype: HTMLUniProgressLinearElement;
        new (): HTMLUniProgressLinearElement;
    };
    interface HTMLUniRadioControllerElement extends Components.UniRadioController, HTMLStencilElement {
    }
    var HTMLUniRadioControllerElement: {
        prototype: HTMLUniRadioControllerElement;
        new (): HTMLUniRadioControllerElement;
    };
    interface HTMLUniSelectElement extends Components.UniSelect, HTMLStencilElement {
    }
    var HTMLUniSelectElement: {
        prototype: HTMLUniSelectElement;
        new (): HTMLUniSelectElement;
    };
    interface HTMLUniTagChipElement extends Components.UniTagChip, HTMLStencilElement {
    }
    var HTMLUniTagChipElement: {
        prototype: HTMLUniTagChipElement;
        new (): HTMLUniTagChipElement;
    };
    interface HTMLUniTextFieldElement extends Components.UniTextField, HTMLStencilElement {
    }
    var HTMLUniTextFieldElement: {
        prototype: HTMLUniTextFieldElement;
        new (): HTMLUniTextFieldElement;
    };
    interface HTMLUniTooltipElement extends Components.UniTooltip, HTMLStencilElement {
    }
    var HTMLUniTooltipElement: {
        prototype: HTMLUniTooltipElement;
        new (): HTMLUniTooltipElement;
    };
    interface HTMLUniUnderlineElement extends Components.UniUnderline, HTMLStencilElement {
    }
    var HTMLUniUnderlineElement: {
        prototype: HTMLUniUnderlineElement;
        new (): HTMLUniUnderlineElement;
    };
    interface HTMLElementTagNameMap {
        "uni-backdrop": HTMLUniBackdropElement;
        "uni-bar-text": HTMLUniBarTextElement;
        "uni-button": HTMLUniButtonElement;
        "uni-checkbox": HTMLUniCheckboxElement;
        "uni-combo-group": HTMLUniComboGroupElement;
        "uni-combo-item": HTMLUniComboItemElement;
        "uni-combo-text": HTMLUniComboTextElement;
        "uni-dialog": HTMLUniDialogElement;
        "uni-dialog-actions": HTMLUniDialogActionsElement;
        "uni-dialog-content": HTMLUniDialogContentElement;
        "uni-dialog-title": HTMLUniDialogTitleElement;
        "uni-errors": HTMLUniErrorsElement;
        "uni-expandable-field": HTMLUniExpandableFieldElement;
        "uni-outside-click": HTMLUniOutsideClickElement;
        "uni-progress-linear": HTMLUniProgressLinearElement;
        "uni-radio-controller": HTMLUniRadioControllerElement;
        "uni-select": HTMLUniSelectElement;
        "uni-tag-chip": HTMLUniTagChipElement;
        "uni-text-field": HTMLUniTextFieldElement;
        "uni-tooltip": HTMLUniTooltipElement;
        "uni-underline": HTMLUniUnderlineElement;
    }
}
declare namespace LocalJSX {
    interface UniBackdrop {
        /**
          * Emitted when the backdrop is tapped.
         */
        "onUniBackdropTap"?: (event: CustomEvent<void>) => void;
        /**
          * If `true`, the backdrop will can be clicked and will emit the `uniBackdropTap` event.
         */
        "tappable"?: boolean;
        /**
          * If `true`, the backdrop will be visible.
         */
        "visible"?: boolean;
    }
    interface UniBarText {
    }
    interface UniButton {
        /**
          * Defines the main color of the button Eg. accent, primary
         */
        "color"?: string | null;
        /**
          * Disables the button, preventing input
         */
        "disabled"?: boolean;
        /**
          * Make this button a link to `href` instead
         */
        "href"?: string;
        /**
          * Display as an icon button
         */
        "icon"?: boolean;
        /**
          * Changes the button into a loading state
         */
        "loading"?: boolean;
        /**
          * Type of the underlying button See https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/button-has-type.md One of 'button', 'submit', or 'reset'
         */
        "type"?: string;
        /**
          * Sets the variant of the button One of 'solid' or 'border'
         */
        "variant"?: ButtonVariant;
    }
    interface UniCheckbox {
        /**
          * The checked state of the checkbox
         */
        "checked"?: boolean;
        /**
          * When true, the checkbox is marked as disabled and state cannot be modified
         */
        "disabled"?: boolean;
        /**
          * Puts the checkbox in an indeterminate state ( [-] )
         */
        "indeterminate"?: boolean;
        /**
          * Emitted when checkbox value is changed
         */
        "onUniChange"?: (event: CustomEvent<boolean>) => void;
        /**
          * Prevents the state from being modified
         */
        "readonly"?: boolean;
        /**
          * HTML Form value. This is not the checked state, use checked instead
         */
        "value"?: string;
    }
    interface UniComboGroup {
        /**
          * Emitted when the selected option changes
         */
        "onUniChange"?: (event: CustomEvent<string | number>) => void;
        /**
          * Value of the selected option
         */
        "value"?: string | number;
        /**
          * Display a different style radio group, either a "combo" row or "button" group
         */
        "variant"?: 'combo' | 'button';
    }
    interface UniComboItem {
        /**
          * Marks this option as disabled
         */
        "disabled"?: boolean;
        /**
          * Emitted when this option is selected (usually when clicked and not disabled)
         */
        "onUniSelect"?: (event: CustomEvent<void>) => void;
        "selected"?: boolean;
        /**
          * Machine value for the option
         */
        "value"?: string;
    }
    interface UniComboText {
        /**
          * Marks this option as disabled
         */
        "disabled"?: boolean;
        /**
          * Emitted when the button is clicked
         */
        "onUniSelect"?: (event: CustomEvent<void>) => void;
        /**
          * Event to fire the select event on - focus: when the input is focused - uniInput: when the input's value is changed
         */
        "selectOn"?: string;
        "selected"?: boolean;
        /**
          * Machine value for the option
         */
        "value"?: string;
    }
    interface UniDialog {
        /**
          * Controls whether clicking on the backdrop will dismiss the dialog
         */
        "backdropDismiss"?: boolean;
        /**
          * If `true`, the keyboard will be automatically dismissed when the overlay is presented.
         */
        "keyboardClose"?: boolean;
        /**
          * Emitted after the alert has dismissed.
         */
        "onUniDidDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted after the alert has presented.
         */
        "onUniDidPresent"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted before the alert has dismissed.
         */
        "onUniWillDismiss"?: (event: CustomEvent<OverlayEventDetail>) => void;
        /**
          * Emitted before the alert has presented.
         */
        "onUniWillPresent"?: (event: CustomEvent<void>) => void;
        "overlayIndex": number;
        "presented"?: boolean;
    }
    interface UniDialogActions {
    }
    interface UniDialogContent {
        /**
          * Whether to play the shaking animation
         */
        "shaking"?: boolean;
    }
    interface UniDialogTitle {
    }
    interface UniErrors {
        /**
          * Display one or more errors
         */
        "error"?: string | string[];
    }
    interface UniExpandableField {
        /**
          * Makes the field disabled and unselectable
         */
        "disabled"?: boolean;
        /**
          * Display text inside the trigger
         */
        "displayText"?: string;
        /**
          * Displays error(s) below the input
         */
        "error"?: string | string[];
        /**
          * Label text above the field
         */
        "label"?: string;
        /**
          * Displays a visual (optional) marker
         */
        "optional"?: boolean;
    }
    interface UniOutsideClick {
        /**
          * Emitted when the document is clicked outside this tree
         */
        "onUniOutsideClick"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * Specify a root to listen on, anything "outside" this will trigger. Useful for escaping shadowDOM
         */
        "root"?: HTMLElement;
    }
    interface UniProgressLinear {
        /**
          * Set the bar's color
         */
        "color"?: string;
        /**
          * Controls if the loading bar is visible *
         */
        "value"?: boolean;
    }
    interface UniRadioController {
        /**
          * Emitted when the selected option changes
         */
        "onUniChange"?: (event: CustomEvent<string | number>) => void;
        /**
          * Value of the selected option
         */
        "value"?: string;
    }
    interface UniSelect {
        /**
          * Displays error(s) below the input
         */
        "error"?: string | string[];
        /**
          * Label to display above the select box
         */
        "label"?: string;
    }
    interface UniTagChip {
        /**
          * Override the default color
         */
        "color"?: string;
    }
    interface UniTextField {
        /**
          * Hint to the user agent how this field should be autocompleted
         */
        "autocomplete"?: string;
        /**
          * Makes the field disabled and unselectable
         */
        "disabled"?: boolean;
        /**
          * Displays errors below the input, or puts field into error state
         */
        "error"?: string | string[] | boolean;
        /**
          * Label text above the field
         */
        "label"?: string;
        /**
          * Alternatively, use a <slot> inside the label to render custom contents.
         */
        "labelSlot"?: boolean;
        /**
          * Maximum value when the input is in number mode
         */
        "max"?: number;
        /**
          * Maximum string length
         */
        "maxlength"?: number;
        /**
          * Minimum value when the input is in number mode
         */
        "min"?: number;
        /**
          * Minimum string length
         */
        "minlength"?: number;
        /**
          * Name of the native input element
         */
        "name"?: string;
        /**
          * Emitted when the native input is blurred / focus is lost
         */
        "onUniBlur"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when form field value is committed
         */
        "onUniChange"?: (event: CustomEvent<string>) => void;
        /**
          * Emitted when the native input is focused
         */
        "onUniFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the form field value changes
         */
        "onUniInput"?: (event: CustomEvent<string>) => void;
        /**
          * Displays a visual (optional) marker
         */
        "optional"?: boolean;
        /**
          * Placeholder displayed inside the field
         */
        "placeholder"?: string;
        /**
          * Prevents editing the field, but allows selecting text
         */
        "readonly"?: boolean;
        /**
          * Marks the input as required
         */
        "required"?: boolean;
        /**
          * Type for the underlying <input> or "textarea" to switch out the element
         */
        "type"?: string;
        /**
          * Set the value of the field
         */
        "value"?: string;
    }
    interface UniTooltip {
        /**
          * Whether to display an arrow pointing from the tooltip bubble
         */
        "arrow"?: boolean;
        /**
          * Delay before hiding the tooltip after mouseleave/blur
         */
        "hideDelay"?: number;
        /**
          * Which side to position the tooltip on
         */
        "position"?: 'top' | 'bottom' | 'left' | 'right';
        /**
          * Text content to display inside the tooltip. Overrides the `content` slot
         */
        "text"?: string;
        /**
          * Control whether the tooltip shows on focus
         */
        "useFocus"?: boolean;
        /**
          * Control whether the tooltip shows on hover
         */
        "useHover"?: boolean;
        /**
          * Programmatically show the tooltip
         */
        "value"?: boolean;
    }
    interface UniUnderline {
    }
    interface IntrinsicElements {
        "uni-backdrop": UniBackdrop;
        "uni-bar-text": UniBarText;
        "uni-button": UniButton;
        "uni-checkbox": UniCheckbox;
        "uni-combo-group": UniComboGroup;
        "uni-combo-item": UniComboItem;
        "uni-combo-text": UniComboText;
        "uni-dialog": UniDialog;
        "uni-dialog-actions": UniDialogActions;
        "uni-dialog-content": UniDialogContent;
        "uni-dialog-title": UniDialogTitle;
        "uni-errors": UniErrors;
        "uni-expandable-field": UniExpandableField;
        "uni-outside-click": UniOutsideClick;
        "uni-progress-linear": UniProgressLinear;
        "uni-radio-controller": UniRadioController;
        "uni-select": UniSelect;
        "uni-tag-chip": UniTagChip;
        "uni-text-field": UniTextField;
        "uni-tooltip": UniTooltip;
        "uni-underline": UniUnderline;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "uni-backdrop": LocalJSX.UniBackdrop & JSXBase.HTMLAttributes<HTMLUniBackdropElement>;
            "uni-bar-text": LocalJSX.UniBarText & JSXBase.HTMLAttributes<HTMLUniBarTextElement>;
            "uni-button": LocalJSX.UniButton & JSXBase.HTMLAttributes<HTMLUniButtonElement>;
            "uni-checkbox": LocalJSX.UniCheckbox & JSXBase.HTMLAttributes<HTMLUniCheckboxElement>;
            "uni-combo-group": LocalJSX.UniComboGroup & JSXBase.HTMLAttributes<HTMLUniComboGroupElement>;
            "uni-combo-item": LocalJSX.UniComboItem & JSXBase.HTMLAttributes<HTMLUniComboItemElement>;
            "uni-combo-text": LocalJSX.UniComboText & JSXBase.HTMLAttributes<HTMLUniComboTextElement>;
            "uni-dialog": LocalJSX.UniDialog & JSXBase.HTMLAttributes<HTMLUniDialogElement>;
            "uni-dialog-actions": LocalJSX.UniDialogActions & JSXBase.HTMLAttributes<HTMLUniDialogActionsElement>;
            "uni-dialog-content": LocalJSX.UniDialogContent & JSXBase.HTMLAttributes<HTMLUniDialogContentElement>;
            "uni-dialog-title": LocalJSX.UniDialogTitle & JSXBase.HTMLAttributes<HTMLUniDialogTitleElement>;
            "uni-errors": LocalJSX.UniErrors & JSXBase.HTMLAttributes<HTMLUniErrorsElement>;
            "uni-expandable-field": LocalJSX.UniExpandableField & JSXBase.HTMLAttributes<HTMLUniExpandableFieldElement>;
            "uni-outside-click": LocalJSX.UniOutsideClick & JSXBase.HTMLAttributes<HTMLUniOutsideClickElement>;
            "uni-progress-linear": LocalJSX.UniProgressLinear & JSXBase.HTMLAttributes<HTMLUniProgressLinearElement>;
            "uni-radio-controller": LocalJSX.UniRadioController & JSXBase.HTMLAttributes<HTMLUniRadioControllerElement>;
            "uni-select": LocalJSX.UniSelect & JSXBase.HTMLAttributes<HTMLUniSelectElement>;
            "uni-tag-chip": LocalJSX.UniTagChip & JSXBase.HTMLAttributes<HTMLUniTagChipElement>;
            "uni-text-field": LocalJSX.UniTextField & JSXBase.HTMLAttributes<HTMLUniTextFieldElement>;
            "uni-tooltip": LocalJSX.UniTooltip & JSXBase.HTMLAttributes<HTMLUniTooltipElement>;
            "uni-underline": LocalJSX.UniUnderline & JSXBase.HTMLAttributes<HTMLUniUnderlineElement>;
        }
    }
}
