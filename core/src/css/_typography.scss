@use "sass:list";
@use "sass:map";

$_textElems: h1, h2, h3, h4, h5, h6, p, i, code, b;

$graphik-medium: 500;
$graphik-semibold: 600;
$graphik-bold: 700;

$uni-styles: (
  h1: (
    font-size: 3rem,
    font-family: var(--font-header),
    font-weight: $graphik-semibold,
    line-height: 1.4
  ),
  h2: (
    font-size: 2rem,
    font-weight: $graphik-semibold,
    font-family: var(--font-header),
  ),
  h3: (
    font-size: calc(5rem / 3),
    font-weight: $graphik-medium,
    font-family: var(--font-header),
  ),
  h4: (
    font-size: 1.5rem,
    font-weight: $graphik-medium,
    font-family: var(--font-header),
  ),
  h5: (
    font-size: calc(4rem / 3),
    font-weight: $graphik-medium,
    font-family: var(--font-header),
  ),
  h6: (
    font-size: 1rem,
    font-weight: $graphik-medium,
    font-family: var(--font-header),
  ),
  overline: (
    font-size: calc(2rem / 3),
    font-family: var(--font-body),
    font-weight: bold,
    text-transform: uppercase
  ),
  caption: (
    font-size: calc(9rem / 10),
    font-family: var(--font-body),
    color: var(--uni-medium)
  ),
  link: (
    color: var(--uni-primary)
  ),
  body: ( // This is the root style
    font-size: 18px,
    font-family: var(--font-body)
  )
);

// Outputs the rules for a single style
@mixin useStyle($name) {
  @if map.has_key($uni-styles, $name) != true {
    @error "Unknown Font Style '#{$name}'"
  }

  @each $key, $val in map.get($uni-styles, $name) {
    #{$key}: #{$val};
  }
}

// Configures default font families
@mixin _useFontFamilyVars($fonts) {
  @if map.has_key($fonts, body) {
    --font-body: #{map.get($fonts, body)};
  } @else {
    --font-body: Arial, sans-serif;
  }

  @if map.has_key($fonts, header) {
    --font-header: #{map.get($fonts, header)};
  } @else {
    --font-header: Arial, sans-serif;
  }
}

// Outputs type configuration, should only be used in theming
@mixin typeRoot($typeConfig) {
  @include _useFontFamilyVars($typeConfig);

  --uni-text-light: #{map.get($typeConfig, light)};
  --uni-text-dark: #{map.get($typeConfig, dark)};

  @include useStyle(body);
  @if map.has_key($typeConfig, font-size) {
    font-size: map.get($typeConfig, font-size);
  } @else {
    font-size: 18px;
  }
}
@mixin typeClasses($typeConfig, $scope) {
  @if not map.has_key($uni-styles, body) {
    @error "You must include a body font style"
  }

  @each $name, $val in $uni-styles {
    $selector: ".display-" + $name;
    @if list.index($_textElems, $name) {
      $selector: $selector + ", " + $name;
    }

    //@if $name == body and $scope == ":root" {
    //  $selector: $selector + ", :root";
    //}

    @if $name == link {
      $selector: $selector + ", a";
    }

    #{$selector} {
      @include useStyle($name);
    }
  }
}
