@use "sass:map";

@mixin outputColor($name, $hex) {
  --uni-#{"" + $name}: #{$hex};
}

@function useVar($name, $shade: base) {
  @if $shade == base {
    @return var(--uni-color, var(--uni-#{$name}));
  } @else {
    @return var(--uni-color-#{$shade}, var(--uni-#{$name}-#{$shade}));
  }
}

@mixin _outputColorVars($name, $color-def) {
  // Output base
  @if map_has_key($color-def, base) {
    @include outputColor($name, map_get($color-def, base));
  } @else {
    @error No base shade for color $name;
  }

  // Output contrast color
  @if map.get($color-def, contrast) == light {
    @include outputColor($name + '-contrast', var(--uni-white));
  } @else {
    @include outputColor($name + '-contrast', var(--uni-dark));
  }

  // Output tints
  @include outputColor($name + '-shade', map.get($color-def, shade));
  @include outputColor($name + '-tint', map.get($color-def, tint));
}

@mixin _outputClass($name) {
  .uni-color-#{"" + $name} {
    --uni-color: var(--uni-#{$name});
    --uni-color-shade: var(--uni-#{$name}-shade);
    --uni-color-tint: var(--uni-#{$name}-tint);
    --uni-color-contrast: var(--uni-#{$name}-contrast);
  }
}


@mixin colorRoot($colors) {
  @if map.has-key($colors, white) != true {
    @include _outputColorVars(white, (
      base: #FFFFFF,
      shade: #EEEEEE,
      tint: #FFFFFF,
      contrast: dark
    ));
  }
  @if map.has-key($colors, black) != true {
    @include _outputColorVars(black, (
      base: #000000,
      shade: #000000,
      tint: #111111,
      contrast: light
    ));
  }
  @each $name, $def in $colors { // Sets up CSS variables defining every color
    @include _outputColorVars($name, $def);
  }
}
@mixin colorClasses($colors) {
  @each $name, $def in $colors {
    @include _outputClass($name);
  }
  @include _outputClass(white);
  @include _outputClass(black);
}
