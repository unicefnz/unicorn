@use "sass:map";

@function useVar($name, $shade: base) {
  @if $shade == base {
    @return var(--uni-color, var(--uni-#{$name}));
  } @else {
    @return var(--uni-color-#{$shade}, var(--uni-#{$name}-#{$shade}));
  }
}

@mixin _outputColorVars($name, $color-def) {
  // Output base
  @if map_has_key($color-def, base) {
    --uni-#{$name}: #{map_get($color-def, base)};
  } @else {
    @error No base shade for color $name;
  }

  // Output contrast color
  @if map.get($color-def, contrast) == light {
    --uni-#{$name}-contrast: var(--uni-text-light);
  } @else {
    --uni-#{$name}-contrast: var(--uni-text-dark);
  }

  // Output tints
  --uni-#{$name}-shade: #{map.get($color-def, shade)};
  --uni-#{$name}-tint: #{map.get($color-def, tint)};
}

@mixin _outputClass($name, $color-def) {
  .uni-color-#{$name} {
    --uni-color: #{map.get($color-def, base)};
    --uni-color-shade: #{map.get($color-def, shade)};
    --uni-color-tint: #{map.get($color-def, tint)};
    --uni-color-contrast: var(--uni-text-#{map.get($color-def, contrast)});
  }
}


@mixin useColors($colors) {
  :root {
    @each $name, $def in $colors { // Sets up CSS variables defining every color
      @include _outputColorVars($name, $def);
    }
  }

  @each $name, $def in $colors {
    @include _outputClass($name, $def);
  }
}
