name: CI/CD

on:
  push:
    branches:
      - '!gh-pages'
  pull_request:
    branches:
      - 'master'

jobs:
  # This jobs essentially clones the repo, installs all the deps, and saves the result in the cache as $SHA-project
  install:
    runs-on: ubuntu-latest
    steps:
      # Clone the repository to $GITHUB_WORKSPACE
      - uses: actions/checkout@v2
        with:
          fetch-depth: 10

      # Fetch tags for recent commits
      - run: git fetch --depth=10 origin +refs/tags/*:refs/tags/*

      # Cache deps for a faster install
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      # Install root deps (Just lerna CLI at the moment)
      - run: npm ci

      # Install dependencies in all packages with lerna
      - run: ./node_modules/.bin/lerna bootstrap

      # Cache the result of the install
      - uses: actions/cache@v2
        id: cache-project
        with:
          path: ./*
          key: ${{ github.sha }}-installed

  # Fail fast, check that the new code looks good
  lint:
    runs-on: ubuntu-latest
    needs: install
    steps:
      # Restore the project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-installed

      # Let each package lint itself
      - run: ./node_modules/.bin/lerna run lint

  # Builds the @unicorndesign/core package, and saves it as $SHA-core
  build:
    name: Build All
    runs-on: ubuntu-latest
    needs: install
    steps:
      # Restore the project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-installed

      # Build all packages
      - run: ./node_modules/.bin/lerna run build

      # Saves build artifacts
      - uses: actions/cache@v2
        id: cache-build
        with:
          path: ./*
          key: ${{ github.sha }}-built

  # Tests @unicorndesign/core
  test-core:
    name: Core - Test
    runs-on: ubuntu-latest
    needs: install
    steps:
      # Restore the project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-installed

      # Execute tests
      - name: Run tests
        run: npm test
        working-directory: ./core

  # Upload the build to chromatic for additional visual testing
  chromatic:
    name: Core - Chromatic
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Load up the built project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-built

      # Upload to Chromatic
      - name: Run Chromatic
        run: npm run chromatic -- --auto-accept-changes master --exit-zero-on-changes
        working-directory: ./core
        env:
          CHROMATIC_APP_CODE: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  # Merges all the tests together into one check
  passed-tests:
    name: Check nothing is on fire
    runs-on: ubuntu-latest
    needs: [lint, build, test-core]
    steps:
      - run: exit 0

  # Publish website (packages/site & storybook)
  publish-site:
    name: Publish Site
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: passed-tests
    steps:
      # Load up the built project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-built

      # Builds a static storybook
      - name: Build Storybook
        run: npm run build:storybook
        working-directory: ./core

      # Shuffles around files to match website structure
      - name: Arrange artifacts
        run: ./scripts/move-artifacts.sh

      - name: Remove bad github creds before deploy
        run: git config --local --unset-all 'http.https://github.com/.extraheader'

      # Deploy to github pages!
      - name: Deploy Site ðŸš€
        uses: JamesIves/github-pages-deploy-action@3.6.2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist

  # Try publishing every package with lerna
  publish-packages:
    name: Publish to NPM (Maybe)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: passed-tests
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      # Load up the built project
      - uses: actions/cache@v2
        id: restore-project
        with:
          path: ./*
          key: ${{ github.sha }}-built

      # Run a script which will determine what to publish and how
      - run: ./scripts/publish.sh
